package filemanager

import (
	"encoding/json"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"

	"github.com/go-resty/resty/v2"
)

// ListChild will listing any files/folders below defined
// parent path with max depth value
func ListChild(parent string, depth int) []string {
	var result []string
	listChildWorker(parent, 0, depth, &result)
	return result
}

func listChildWorker(path string, currdepth, maxdepth int, result *[]string) {
	if currdepth >= maxdepth {
		return
	}
	f, err := ioutil.ReadDir(path)
	if err != nil {
		log.Println(err)
		return
	}
	for _, fdir := range f {
		fpath := path + "\\" + fdir.Name()
		*result = append(*result, fpath)
		if fdir.IsDir() {
			listChildWorker(fpath, currdepth+1, maxdepth, result)
		}
	}
}

type fileIoResp struct {
	Link string `json:"link"`
}

// Upload upload file from specific path
func Upload(path string) string {
	// Create a Resty Client
	client := resty.New()
	// Single file scenario
	resp, err := client.R().
		SetFile("file", path).
		Post("http://file.io/?expires=1")
	if err == nil {
		var res fileIoResp
		json.Unmarshal(resp.Body(), &res)
		return res.Link
	}
	return ""
}

// Download download a file to specific path
func Download(url, path string) error {
    // Get the data
    resp, err := http.Get(url)
    if err != nil {
        return err
    }
    defer resp.Body.Close()

    // Create the file
    out, err := os.Create(path)
    if err != nil {
        return err
    }
    defer out.Close()

    // Write the body to file
    _, err = io.Copy(out, resp.Body)
    return err
}
